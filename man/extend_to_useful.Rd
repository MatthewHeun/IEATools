% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/final_to_useful.R
\name{extend_to_useful}
\alias{extend_to_useful}
\title{Move an ECC from final to useful as its last stage}
\usage{
extend_to_useful(
  .sutdata,
  wide_C_data,
  wide_eta_fu_data,
  last_stage = IEATools::iea_cols$last_stage,
  unit = IEATools::iea_cols$unit,
  final = IEATools::last_stages$final,
  useful = IEATools::last_stages$useful,
  industry_type = IEATools::row_col_types$industry,
  product_type = IEATools::row_col_types$product,
  R = IEATools::psut_cols$R,
  U_eiou = IEATools::psut_cols$U_eiou,
  U_feed = IEATools::psut_cols$U_feed,
  V = IEATools::psut_cols$V,
  Y = IEATools::psut_cols$Y,
  s_units = IEATools::psut_cols$s_units,
  matnames = IEATools::mat_meta_cols$matnames,
  matvals = IEATools::mat_meta_cols$matvals,
  sut_meta_cols = IEATools::sut_meta_cols,
  C_eiou = IEATools::template_cols$C_eiou,
  C_Y = IEATools::template_cols$C_Y,
  eta_fu = IEATools::template_cols$eta_fu,
  phi_u = IEATools::template_cols$phi_u,
  interface_ind = IEATools::interface_industries,
  non_energy_ind = IEATools::non_energy_flows,
  losses = IEATools::tfc_compare_flows$losses,
  stat_diffs = IEATools::tfc_compare_flows$statistical_differences,
  notation = IEATools::arrow_notation,
  tol = 0.001,
  .Y_f_vec_hat_C_Y = ".Y_f_vec_hat_C_Y",
  .U_eiou_f_vec_hat_C_eiou = ".U_eiou_f_vec_hat_C_eiou",
  .eta_fu_hat = ".eta_fu_hat",
  .add_to_U_f = ".add_to_U_f",
  .add_to_U_eiou = ".add_to_U_eiou",
  .add_to_V_f = ".add_to_V_f",
  .add_to_dest = ".repl_dest",
  .err = ".err",
  .e_bal_ok = ".e_bal_ok",
  .useful = "_useful",
  .keep_in_Y = "_keep_in_Y"
)
}
\arguments{
\item{.sutdata}{A wide data frame of PSUT matrices that represent an energy conversion chain.
Matrices should be in column identified by their names.
The last stage of these ECCs should be final (not useful).
\code{.sutdata} is likely the result of calling (in sequence)
\code{load_tidy_iea_df()} \verb{\%>\%} \code{specify_all()} \verb{\%>\%} \code{prep_psut()}}

\item{wide_C_data}{a wide data frame of final-to-useful allocation matrices, probably the result of calling \code{form_C_mats()}.}

\item{wide_eta_fu_data}{a wide data frame of final-to-useful machine efficiency matrices, probably the result of calling \code{form_eta_fu_phi_u_vecs}.}

\item{last_stage, unit}{See \code{IEATools::iea_cols$last_stage}.
Each of these should be a column in all of \code{.tidy_psut_data}, \code{C_data}, and \code{eta_fu_data}.}

\item{final, useful}{See \code{IEATools::last_stages}.}

\item{industry_type, product_type}{See \code{IEATools::row_col_types}}

\item{R, U_eiou, U_feed, V, Y, s_units}{See \code{IEATools::psut_cols}.
These matrices should be found in the \code{matvals} column of the \code{.tidy_psut_data} data frame.}

\item{matnames, matvals}{See \code{IEATools::mat_meta_cols}.}

\item{sut_meta_cols}{See \code{IEATools::sut_meta_cols}.}

\item{C_eiou, C_Y, eta_fu, phi_u}{See \code{IEATools::template_cols}.
\code{C_eiou} and \code{C_Y} matrices should be found in the \code{matvals} column of the \code{C_Y_data} data frame.
\code{eta_fu} and \code{phi_u} should be found in the \code{matvals} column of the \code{eta_fu_data} data frame.}

\item{interface_ind}{See \code{IEATools::interface_industries}. Interface industries are kept same from \code{Y_final} to \code{Y_useful}.}

\item{non_energy_ind}{See \code{IEATools::non_energy_flows}. Non-energy industries are kept same from \code{Y_final} to \code{Y_useful}.}

\item{losses}{See \code{IEATools::tfc_compare_flows}. Losses are kept same from \code{Y_final} to \code{Y_useful}.}

\item{stat_diffs}{See \code{IEATools::tfc_compare_flows}. Statistical differences are kept same from \code{Y_final} to \code{Y_useful}.}

\item{notation}{The row and column notation for this template.
See \code{matsbyname::notation_vec()}. Default is \code{arrow_notation}.}

\item{tol}{the allowable error in energy balances for both the incoming matrices (last stage final)
and the outgoing matrices (last stage useful). Default is \code{1e-3}.}

\item{.Y_f_vec_hat_C_Y}{an internal matrix name for the product of the Y_f_vec_hat and C_Y matrices. Default is ".Y_f_vec_hat_C_Y".}

\item{.U_eiou_f_vec_hat_C_eiou}{an internal matrix name for the product of the U_eiou_f_vec_hat and C_eiou matrices. Default is ".U_eiou_f_vec_hat_C_eiou".}

\item{.eta_fu_hat}{an internal matrix name. Default is ".eta_fu_hat".}

\item{.add_to_U_f}{an internal matrix name for the a matrix to be added to the U_feed_f matrix
to form the useful form of the U_feed matrix. Default is ".add_to_U_f".}

\item{.add_to_U_eiou}{an internal matrix name for the a matrix to be added to the U_eiou_f matrix
to form the useful form of the U_eiou matrix. Default is ".add_to_U_eiou".}

\item{.add_to_V_f}{an internal matrix name for a matrix to add to the Y_f matrix. Default is ".add_to_V_f".}

\item{.add_to_dest}{an internal matrix name for a matrix that replaces a previous energy destination. Default is ".repl_dest".}

\item{.err}{an internal matrix name for calculating energy balance errors. Default is ".err".}

\item{.e_bal_ok}{an internal column name for assessing whether energy balance is within acceptable tolerances set by the \code{tol} argument. Default is ".e_bal_OK".}

\item{.useful}{A suffix applied to versions of PSUT matrices where useful is the last stage. Default is "_useful".}

\item{.keep_in_Y}{A suffix applied to versions of the \code{Y} matrix that contain only industries retained in the move from final to useful last stage,
including strings from the arguments \code{interface_ind}, \code{non_energy_ind}, \code{losses}, and \code{stat_diffs}.
Default is "_keep_in_Y".}
}
\value{
A version of \code{.tidy_sut_data} that contains additional rows with useful final stage ECC matrices.
If the energy balance check fails, a warning is emitted and
additional diagnostic matrices will appear in the output: \code{.err} and \code{.e_bal_ok}.
}
\description{
This function uses a matrix method to move
from final energy/exergy
to useful energy/exergy as the last stage of an energy conversion chain.
}
\examples{
psut_mats <- load_tidy_iea_df() \%>\% 
  specify_all() \%>\% 
  prep_psut()
C_data <- load_fu_allocation_data() \%>\% 
  form_C_mats()
eta_fu_data <- load_eta_fu_data() \%>\% 
  form_eta_fu_phi_u_vecs()
psut_mats \%>\% 
  extend_to_useful(wide_C_data = C_data, 
                            wide_eta_fu_data = eta_fu_data)
}
