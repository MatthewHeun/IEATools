% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{replace_join}
\alias{replace_join}
\title{\code{full_join} with replacement}
\usage{
replace_join(
  x,
  y,
  replace_col,
  by = dplyr::intersect(names(x), names(y)) \%>\% dplyr::setdiff(replace_col),
  copy = FALSE,
  suffix = c(".x", ".y"),
  ...
)
}
\arguments{
\item{x}{object on which replace_join will be performed.
\code{x} is the data frame in which rows will be replaced by matching rows from \code{y}.}

\item{y}{object on which replace_join will be performed.
\code{y} is the data frame from which replacement rows are obtained when matching rows are found
and from which unmatching rows are added to the outgoing data frame.}

\item{replace_col}{the string name of the column (common to both \code{x} and \code{y})
whose values in \code{y} will be inserted into \code{x} where row matches are found for the \code{by} columns.
\code{replace_col} should not be in \code{by}.
The default value of \code{by} ensures that \code{replace_col} is not in \code{by}.}

\item{by}{the string names of columns (common to \code{x} and \code{y}) on which matching rows will be determined.
Default is \code{dplyr::intersect(names(x), names(y)) \%>\% dplyr::setdiff(replace_col)}.
This default ensures that \code{replace_col} is not in \code{by}, as required.}

\item{copy}{passed to \code{dplyr::left_join()}. Default value is \code{FALSE}.}

\item{suffix}{appended to \code{replace_col} to form the names of columns created in \code{x} during the internal \code{dplyr::left_join()} operation.
Default is \code{c(".x", ".y")}, same as the default for \code{dplyr::full_join()}.}

\item{...}{passed to \code{dplyr::full_join()}}
}
\value{
a copy of \code{x} in which matching \code{by} rows are replaced by matched rows from \code{y} and unmatched rows from \code{y} are added to \code{x}.
}
\description{
Perform a modified \code{dplyr::full_join()} on \code{x} and \code{y},
returning all columns from \code{x},
non-matching rows from \code{x},
and all rows from \code{y}.
Essentially \code{replace_join()} replaces matching rows in \code{x} with corresponding rows from \code{y}
and adds all unmatched rows from \code{y}.
}
\details{
If \code{x} contains multiple matching rows, matching rows in \code{y} are inserted into \code{x} at each matching location.
If \code{y} contains multiple matching rows, all are inserted into \code{x} at each matching location.
See examples.

Columns of \code{x} and \code{y} named in \code{by} and \code{replace_col} should not be factors.

If \code{replace_col} is not in both \code{x} and \code{y}, \code{x} is returned, unmodified.
}
\examples{
DFA <- data.frame(x = c(1, 2), y = c("A", "B"), stringsAsFactors = FALSE)
DFB <- data.frame(x = c(2, 3), y = c("C", "D"), stringsAsFactors = FALSE)
replace_join(DFA, DFB, replace_col = "y")
replace_join(DFB, DFA, replace_col = "y")
DFC <- data.frame(x = c(2, 2), y = c("M", "N"), stringsAsFactors = FALSE)
replace_join(DFA, DFC, replace_col = "y")
replace_join(DFC, DFA, replace_col = "y")
DFD <- data.frame(x = c(2, 2), y = c("A", "B"), stringsAsFactors = FALSE)
replace_join(DFC, DFD, replace_col = "y")
}
